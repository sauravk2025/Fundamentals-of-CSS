
#container
{
    height:400px;
    width: 200px;
    background-color: antiquewhite;
    border: 1px solid black;
    margin: auto;
    display: flex;/*FLEX is essential for 1 dimensional layout.Elements inside the container adjust its own height and width to remain inside unleass its font-size allows it*/
    flex-direction: row;/*ROW-main aixs left to right,ROW-REVERSE - main axis right to left, COLUMN-main axis top to bottom, COLUMN-REVERSE- main axis bottom to top */
    justify-content: center; /*specifies how to arrange items across main axis*/
    align-items:center;/*/*specifies how to arrange items across cross axis*/

}

.boxes
{
    height: 50px;
    width: 100px;
    border: 1px solid black;
    display: inline-block;
    text-align: center;

}
#b1
{
    background-color: violet;
}
#b2
{
    background-color:indigo;
}
#b3
{
    background-color: blue;
}
#b4
{
    background-color: green;
}
#b5
{
    background-color: yellow;
}

.try
{
    background-color: beige;
    height: 600px;
    width: 300px;
    border: 1px solid black;
    display: flex; /*starts to behave like a block element*/
    flex-wrap: wrap; /* works when there are many items horizantally and causes a scrollbar (one of the cases)
        nowrap (default) - All items stay in one line, might overflow
        wrap - Items wrap onto multiple lines, from top to bottom
        wrap-reverse - Items wrap onto multiple lines, but from bottom to top*/
     /* align content- align items across cross axis and no space is left between*/
    align-content: flex-end; /*align the items towards the end of flex container without leaving space since we use align contents*/
    /* align-items: center; */
    /*align - self : center - to align elements individually along the vertical axis
    
    gap: 10px - gap between elements
    row-gap :10px - gap between rows
    colmn-gap : 10px - gap between columns*/


}

/*display : inline -flex (similar to inline-block but we can apply flex porperties)

Also to invidividually change the order of elements inside div container where we applied flex properties we can use order property inside each element using their ids.
#box1{
order:3; position of element interchanges with 3rd element.
flex-grow : 1; the element expands and take the remaining space . Just opposite to it is flex shrink which is the default behavior.

*/
.trybox
{
    height:50px ;
    width: 60px;
    border: 1px solid black;

}

#t1
{
    align-self: flex-start; /*will not work when using align content(flex wrap and nospace). Usually works with align items and this has the highest priority*/
}

#t4
{
    flex-shrink: 2;/*will not work with flex-wrap:wrap.Usually every elemnts grow and shrink inside the container equally by a factor of 1. But if i want any element to shrink 2 times than others I use this.It can take decimal places */
}
#t5
{
    flex-grow: 2;
}

